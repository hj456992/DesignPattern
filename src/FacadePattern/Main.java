package FacadePattern;

/**
 * 外观模式：
 * 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
 *
 * JDK中使用场景：
 * Tomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，
 * 每个组件需要相互通信，但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法。
 *
 * 何时使用：
 * 1、首先，在设计初期阶段，应该要有意识的将不同的两个层分离，
 * 比如经典的三层架构，就需要考虑在数据访问层和业务逻辑层、业务逻辑层和表示层的层与层之间建立外观Facade，
 * 这样可以为复杂的子系统提供一个简单的接口，使得耦合大大降低。
 * 2、其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，大多数的模式使用时也都会产生很多很小的类，
 * 这本是好事，但也给外部调用它们的用户程序带来了使用上的困难，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖。
 * 3、第三，在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，但因为它包含非常重要的功能，
 * 新的需求开发必须要依赖于它。此时用外观模式Facade也是非常合适的。
 * 你可以为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，
 * 让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作。[R2P]”
 *
 * 测试场景：
 * 投资者（Client）理财时，面对数量繁多的理财产品无从下手，就通过购买基金（Facade）来理财，而基金机构再对理财产品（SubSystem）进行交互
 *
 * Created by houjue on 2018/11/11.
 */
public class Main {

    public static void main(String[] args) {
        Funds funds = new Funds();

        funds.buyFunds();
        funds.sellFunds();
    }
}
